var fs = require("fs");
var pathExists = require("path-exists");
var jwt = require("jsonwebtoken");
var uuid = require('uuid');
var outputFileSync = require('output-file-sync');
function initsysid(serialPath, seri) {
    var serial;
    if (seri) {
        serial = seri;
    }
    else {
        serial = uuid.v4();
    }
    var secret = uuid.v4() + uuid.v4();
    outputFileSync(serialPath + '/.secret', secret, 'utf-8');
    outputFileSync(serialPath + '/serial', serial, 'utf-8');
    return { serial: serial, secret: secret };
}
function readSerial(serialPath) {
    return fs.readFileSync(serialPath + '/serial', 'utf8');
}
function readSecret(serialPath) {
    return fs.readFileSync(serialPath + '/.secret', 'utf8');
}
function readTracker(serialPath) {
    return fs.readFileSync(serialPath + '/.tracker', 'utf8');
}
function readJson(serialPath) {
    var config = {};
    config.secret = readSecret(serialPath);
    config.serial = readSerial(serialPath);
    if (pathExists.sync(serialPath + '/.tracker')) {
        config.tracker = readTracker(serialPath);
    }
    return config;
}
var SysID = (function () {
    function SysID(dir, options) {
        var config;
        if (dir) {
            this.dir = dir;
        }
        else {
            throw new Error('wrong dir');
        }
        if (!options || !options.tracker) {
            this.tracker = false;
        }
        if (!pathExists.sync(this.dir + '/serial')) {
            config = initsysid(this.dir, options.serial);
        }
        else {
            config = readJson(this.dir);
        }
        for (var c = 0; c < Object.keys(config).length; c++) {
            this[Object.keys(config)[c]] = config[Object.keys(config)[c]];
        }
    }
    SysID.prototype.read = function () {
        return readJson(this.dir);
    };
    ;
    SysID.prototype.decode = function () {
        return jwt.verify(this.tracker, this.secret);
    };
    ;
    SysID.prototype.auth = function () {
        var code = jwt.verify(this.tracker, this.secret);
        code.serial = readSerial(this.dir);
        return code;
    };
    ;
    SysID.prototype.sign = function (json) {
        var token = jwt.sign(json, this.secret);
        return token;
    };
    ;
    SysID.prototype.verify = function (token, maxAge) {
        try {
            if (maxAge) {
                var decoded = jwt.verify(token, this.secret, { maxAge: maxAge });
            }
            else {
                var decoded = jwt.verify(token, this.secret);
            }
            return decoded;
        }
        catch (err) {
            return err;
        }
    };
    ;
    SysID.prototype.validate = function (serial, objectkey) {
        if (this.tracker) {
            var config = {
                secret: this.secret
            };
            if (objectkey.serial) {
                this.serial = objectkey.serial;
                outputFileSync(this.dir + '/serial', this.serial, 'utf-8');
                delete objectkey.serial;
            }
            var token = jwt.sign(objectkey, this.secret, { noTimestamp: true });
            outputFileSync(this.dir + '/.tracker', token, 'utf-8');
            this.tracker = token;
        }
        else {
            throw new Error('wrong serial or just validated');
        }
    };
    ;
    return SysID;
})();
module.exports = SysID;

//# sourceMappingURL=data:application/json;base64,
